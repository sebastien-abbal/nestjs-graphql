# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthAnonymousResult {
  accessToken: String!
  refreshToken: String!
}

input AuthUserInput {
  email: String!
  password: String!
}

type AuthUserResult {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneIndex: String
  phoneNumber: String
}

union CreateUserPayload = UserAlreadyExistsError | UserResult

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

union DeleteUserPayload =
    DeletionResult
  | NotAuthorizedError
  | UserNotFoundError

type DeletionResult {
  isDeleted: Boolean!
}

interface Error {
  code: String!
  message: String
}

input GetUserFiltersInput {
  email: String
  userID: String
}

input GetUserFiltersInput {
  firstName: String
  lastName: String
  userIDs: [String!]
  userRoles: [UserRole!]
}

type Mutation {
  createUser(createUserData: CreateUserInput!): CreateUserPayload!
  deleteUser(userID: String!): DeleteUserPayload!
  signInAnonymous: SignInAnonymousPayload!
  signInUser(authUserData: AuthUserInput!): SignInUserPayload!
  updateUser(
    updateUserData: UpdateUserInput!
    userID: String!
  ): UpdateUserPayload!
}

type NotAuthorizedError implements Error {
  code: String!
  message: String
}

type Query {
  test: TestPayload!
  user(getUserFiltersData: GetUserFiltersInput!): UserPayload!
  users(
    getUserFiltersData: GetUserFiltersInput
    skip: Int = 0
    take: Int = 20
  ): UserPayload!
}

union SignInAnonymousPayload = AuthAnonymousResult

union SignInUserPayload = AuthUserResult | WrongCredentialsError

type TestFailedError implements Error {
  code: String!
  message: String
}

union TestPayload = TestFailedError | TestResult

type TestResult {
  status: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  phoneIndex: String
  phoneNumber: String
}

union UpdateUserPayload = NotAuthorizedError | UserNotFoundError | UserResult

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  firstName: String!
  id: String!
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  lastLoginAt: DateTime!
  lastName: String!
  phoneIndex: String
  phoneNumber: String
  roles: [UserRole!]!
  updatedAt: DateTime
}

type UserAlreadyExistsError implements Error {
  code: String!
  message: String
}

type UserNotFoundError implements Error {
  code: String!
  message: String
}

union UserPayload = UserNotFoundError | UserResult

type UserResult {
  user: User!
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

union UserPayload = UserResult

type UserResult {
  users: [User!]!
}

type WrongCredentialsError implements Error {
  code: String!
  message: String
}
