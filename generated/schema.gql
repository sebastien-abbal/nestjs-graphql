# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthAnonymousSuccess {
  accessToken: String!
  refreshToken: String!
}

input AuthUserInputs {
  email: String!
  password: String!
}

type AuthUserSuccess {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input UserCreateInputs {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneIndex: String
  phoneNumber: String
}

union UserCreatePayload = UserAlreadyExistsError | UserSuccess

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

union UserDeletePayload =
    DeletionSuccess
  | NotAuthorizedError
  | UserNotFoundError

type DeletionSuccess {
  isDeleted: Boolean!
}

interface Error {
  code: String!
  message: String
}

input UserWhereFilters {
  email: String
  userID: String
}

input UserWhereFilters {
  firstName: String
  lastName: String
  userIDs: [String!]
  userRoles: [UserRole!]
}

type Mutation {
  userCreate(userCreateInputs: UserCreateInputs!): UserCreatePayload!
  userDelete(userID: String!): UserDeletePayload!
  authAnonymous: AuthAnonymousPayload!
  authUser(authUserData: AuthUserInputs!): AuthUserPayload!
  userUpdate(
    userUpdateInputs: UserUpdateInputs!
    userID: String!
  ): UserUpdatePayload!
}

type NotAuthorizedError implements Error {
  code: String!
  message: String
}

type Query {
  test: TestPayload!
  user(userWhereFilters: UserWhereFilters!): UserPayload!
  users(
    userWhereFilters: UserWhereFilters
    skip: Int = 0
    take: Int = 20
  ): UserPayload!
}

union AuthAnonymousPayload = AuthAnonymousSuccess

union AuthUserPayload = AuthUserSuccess | WrongCredentialsError

type TestFailedError implements Error {
  code: String!
  message: String
}

union TestPayload = TestFailedError | TestSuccess

type TestSuccess {
  status: String!
}

input UserUpdateInputs {
  email: String
  firstName: String
  lastName: String
  password: String
  phoneIndex: String
  phoneNumber: String
}

union UserUpdatePayload = NotAuthorizedError | UserNotFoundError | UserSuccess

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  firstName: String!
  id: String!
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  lastLoginAt: DateTime!
  lastName: String!
  phoneIndex: String
  phoneNumber: String
  roles: [UserRole!]!
  updatedAt: DateTime
}

type UserAlreadyExistsError implements Error {
  code: String!
  message: String
}

type UserNotFoundError implements Error {
  code: String!
  message: String
}

union UserPayload = UserNotFoundError | UserSuccess

type UserSuccess {
  user: User!
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

union UserPayload = UserSuccess

type UserSuccess {
  users: [User!]!
}

type WrongCredentialsError implements Error {
  code: String!
  message: String
}
