# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

union AuthAnonymousPayload = AuthAnonymousSuccess

type AuthAnonymousSuccess {
  accessToken: String!
  refreshToken: String!
}

input AuthRefreshInput {
  refreshToken: String!
}

union AuthRefreshPayload = AuthRefreshSuccess | UserBannedError | UserDeletedError | WrongAuthTokenFormatError

type AuthRefreshSuccess {
  accessToken: String!
  refreshToken: String!
  user: User
}

input AuthUserInput {
  email: String!
  password: String!
}

union AuthUserPayload = AuthUserSuccess | UserBannedError | UserDeletedError | WrongCredentialsError

type AuthUserSuccess {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Company {
  _count: CompanyCount!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type CompanyCount {
  formations: Int!
}

type CompanyCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

type CompanyMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CompanyMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type Course {
  _count: CourseCount!
  categories: [CourseCategory!]
  createdAt: DateTime!
  deletedAt: DateTime
  format: SessionFormat!
  id: ID!
  teacher: Teacher!
  teacherID: String!
  title: String!
  updatedAt: DateTime
  versions: [CourseVersion!]
}

type CourseCategory {
  _count: CourseCategoryCount!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type CourseCategoryCount {
  courses: Int!
  tracks: Int!
}

type CourseCategoryCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

type CourseCategoryMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CourseCategoryMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type CourseCount {
  categories: Int!
  versions: Int!
}

type CourseCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  format: Int!
  id: Int!
  teacherID: Int!
  title: Int!
  updatedAt: Int!
}

type CourseMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  format: SessionFormat
  id: String
  teacherID: String
  title: String
  updatedAt: DateTime
}

type CourseMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  format: SessionFormat
  id: String
  teacherID: String
  title: String
  updatedAt: DateTime
}

enum CourseSupportSourceType {
  AUDIO
  IMAGE
  LINK
  PDF
  VIDEO
  VIDEO_LINK
}

type CourseVersion {
  _count: CourseVersionCount!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  duration: DateTime!
  format: SessionFormat!
  formationSessions: [FormationSession!]
  id: ID!
  supports: [CourseVersionSupportSource!]
  updatedAt: DateTime
  validatedAt: DateTime
  validatedBy: User!
  validatedByID: String!
  versionNumber: Int!
}

type CourseVersionAvgAggregate {
  versionNumber: Float
}

type CourseVersionCount {
  formationSessions: Int!
  supports: Int!
}

type CourseVersionCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  duration: Int!
  format: Int!
  id: Int!
  updatedAt: Int!
  validatedAt: Int!
  validatedByID: Int!
  versionNumber: Int!
}

type CourseVersionMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  duration: DateTime
  format: SessionFormat
  id: String
  updatedAt: DateTime
  validatedAt: DateTime
  validatedByID: String
  versionNumber: Int
}

type CourseVersionMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  duration: DateTime
  format: SessionFormat
  id: String
  updatedAt: DateTime
  validatedAt: DateTime
  validatedByID: String
  versionNumber: Int
}

type CourseVersionSumAggregate {
  versionNumber: Int
}

type CourseVersionSupportSource {
  course: CourseVersion!
  createdAt: DateTime!
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: ID!
  provider: MediaProvider
  size: Int
  status: MediaStatus!
  type: CourseSupportSourceType!
  updatedAt: DateTime
  width: Int
}

type CourseVersionSupportSourceAvgAggregate {
  height: Float
  size: Float
  width: Float
}

type CourseVersionSupportSourceCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  fileToDeleteAt: Int!
  height: Int!
  id: Int!
  provider: Int!
  size: Int!
  status: Int!
  type: Int!
  updatedAt: Int!
  width: Int!
}

type CourseVersionSupportSourceMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  type: CourseSupportSourceType
  updatedAt: DateTime
  width: Int
}

type CourseVersionSupportSourceMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  type: CourseSupportSourceType
  updatedAt: DateTime
  width: Int
}

type CourseVersionSupportSourceSumAggregate {
  height: Int
  size: Int
  width: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type DeletionSuccess {
  isDeleted: Boolean!
}

input EnumUserGenderFilter {
  equals: UserGender
  in: [UserGender!]
  not: NestedEnumUserGenderFilter
  notIn: [UserGender!]
}

input EnumUserLocaleFilter {
  equals: UserLocale
  in: [UserLocale!]
  not: NestedEnumUserLocaleFilter
  notIn: [UserLocale!]
}

interface Error {
  code: String!
  message: String
}

type FormationClass {
  _count: FormationClassCount!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  isEnabled: Boolean!
  name: String!
  updatedAt: DateTime
}

type FormationClassCount {
  students: Int!
  teachers: Int!
}

type FormationClassCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  isEnabled: Int!
  name: Int!
  updatedAt: Int!
}

type FormationClassMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
}

type FormationClassMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
}

type FormationCount {
  owners: Int!
  schools: Int!
  sessions: Int!
}

type FormationCountAggregate {
  _all: Int!
  companyID: Int!
  createdAt: Int!
  deletedAt: Int!
  format: Int!
  headMasterID: Int!
  id: Int!
  isEnabled: Int!
  timeFormat: Int!
  type: Int!
  updatedAt: Int!
}

enum FormationFormat {
  ELEARNING
  LIVE
  PRESENTIAL
}

type FormationMaxAggregate {
  companyID: String
  createdAt: DateTime
  deletedAt: DateTime
  format: FormationFormat
  headMasterID: String
  id: String
  isEnabled: Boolean
  timeFormat: FormationTimeFormat
  type: FormationType
  updatedAt: DateTime
}

type FormationMinAggregate {
  companyID: String
  createdAt: DateTime
  deletedAt: DateTime
  format: FormationFormat
  headMasterID: String
  id: String
  isEnabled: Boolean
  timeFormat: FormationTimeFormat
  type: FormationType
  updatedAt: DateTime
}

type FormationSession {
  _count: FormationSessionCount!
  course: CourseVersion!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  endsAt: DateTime!
  format: SessionFormat!
  googleCalendarItem: GoogleCalendarItem
  id: ID!
  isEnabled: Boolean!
  startsAt: DateTime!
  summaryNote: String
  thinkificItems: [ThinkificItem!]
  title: String!
  updatedAt: DateTime
}

type FormationSessionCount {
  thinkificItems: Int!
}

type FormationSessionCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  endsAt: Int!
  format: Int!
  id: Int!
  isEnabled: Int!
  startsAt: Int!
  summaryNote: Int!
  title: Int!
  updatedAt: Int!
}

type FormationSessionMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  endsAt: DateTime
  format: SessionFormat
  id: String
  isEnabled: Boolean
  startsAt: DateTime
  summaryNote: String
  title: String
  updatedAt: DateTime
}

type FormationSessionMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  endsAt: DateTime
  format: SessionFormat
  id: String
  isEnabled: Boolean
  startsAt: DateTime
  summaryNote: String
  title: String
  updatedAt: DateTime
}

enum FormationTimeFormat {
  FULL_TIME
  PART_TIME
}

enum FormationType {
  B2B
  B2C
}

type GoogleCalendarItem {
  createdAt: DateTime!
  createdBy: User!
  createdByID: String!
  deletedAt: DateTime
  googleCalendarID: ID!
  updatedAt: DateTime
}

type GoogleCalendarItemCountAggregate {
  _all: Int!
  createdAt: Int!
  createdByID: Int!
  deletedAt: Int!
  googleCalendarID: Int!
  updatedAt: Int!
}

type GoogleCalendarItemMaxAggregate {
  createdAt: DateTime
  createdByID: String
  deletedAt: DateTime
  googleCalendarID: String
  updatedAt: DateTime
}

type GoogleCalendarItemMinAggregate {
  createdAt: DateTime
  createdByID: String
  deletedAt: DateTime
  googleCalendarID: String
  updatedAt: DateTime
}

enum MediaProvider {
  AWS
}

enum MediaStatus {
  CONVERTING
  ERROR
  OFFLINE
  ONLINE
  UPLOADING
}

type Mutation {
  authAnonymous: AuthAnonymousPayload!
  authRefresh(data: AuthRefreshInput!): AuthRefreshPayload!
  authUser(data: AuthUserInput!): AuthUserPayload!
  userCreate(data: UserCreateOneInput!): UserCreatePayload!
  userDelete(where: UserWhereUniqueInput!): UserDeletePayload!
  userUpdate(data: UserUpdateOneInput!, where: UserWhereUniqueInput!): UserUpdatePayload!
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumUserGenderFilter {
  equals: UserGender
  in: [UserGender!]
  not: NestedEnumUserGenderFilter
  notIn: [UserGender!]
}

input NestedEnumUserLocaleFilter {
  equals: UserLocale
  in: [UserLocale!]
  not: NestedEnumUserLocaleFilter
  notIn: [UserLocale!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type NotAuthorizedError implements Error {
  code: String!
  message: String
}

type Query {
  test: TestPayload!
  user(where: UserWhereUniqueInput!): UserPayload!
  users(cursor: UserWhereUniqueInput, orderBy: UserOrderByWithRelationInput, skip: Int = 0, take: Int = 20, where: UserWhereInput): UsersPayload!
}

enum QueryMode {
  default
  insensitive
}

type School {
  _count: SchoolCount!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  isEnabled: Boolean!
  name: String!
  updatedAt: DateTime
  websiteUrl: String
}

type SchoolCount {
  formations: Int!
  logoPictures: Int!
  tracks: Int!
}

type SchoolCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  isEnabled: Int!
  name: Int!
  updatedAt: Int!
  websiteUrl: Int!
}

type SchoolLogoPictureAvgAggregate {
  height: Float
  size: Float
  width: Float
}

type SchoolLogoPictureCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  fileToDeleteAt: Int!
  height: Int!
  id: Int!
  provider: Int!
  size: Int!
  status: Int!
  updatedAt: Int!
  width: Int!
}

type SchoolLogoPictureMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  updatedAt: DateTime
  width: Int
}

type SchoolLogoPictureMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  updatedAt: DateTime
  width: Int
}

type SchoolLogoPictureSumAggregate {
  height: Int
  size: Int
  width: Int
}

type SchoolMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
  websiteUrl: String
}

type SchoolMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
  websiteUrl: String
}

enum SessionFormat {
  COURSE
  CUSTOM
  DISCUSSION
  WORKSHOP
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type StudentCount {
  formationClasses: Int!
}

type StudentCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  updatedAt: Int!
}

type StudentMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

type StudentMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

type Teacher {
  _count: TeacherCount!
  courses: [Course!]
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  isConfirmed: Boolean!
  updatedAt: DateTime
  user: User!
}

type TeacherCount {
  courses: Int!
  formationClasses: Int!
}

type TeacherCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  isConfirmed: Int!
  updatedAt: Int!
}

type TeacherMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isConfirmed: Boolean
  updatedAt: DateTime
}

type TeacherMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isConfirmed: Boolean
  updatedAt: DateTime
}

type TestFailedError implements Error {
  code: String!
  message: String
}

union TestPayload = TestFailedError | TestSuccess

type TestSuccess {
  status: String!
}

type ThinkificItem {
  createdAt: DateTime!
  createdBy: User!
  createdByID: String!
  deletedAt: DateTime
  thinkificID: ID!
  updatedAt: DateTime
}

type ThinkificItemCountAggregate {
  _all: Int!
  createdAt: Int!
  createdByID: Int!
  deletedAt: Int!
  thinkificID: Int!
  updatedAt: Int!
}

type ThinkificItemMaxAggregate {
  createdAt: DateTime
  createdByID: String
  deletedAt: DateTime
  thinkificID: String
  updatedAt: DateTime
}

type ThinkificItemMinAggregate {
  createdAt: DateTime
  createdByID: String
  deletedAt: DateTime
  thinkificID: String
  updatedAt: DateTime
}

type TrackCount {
  categories: Int!
  schools: Int!
}

type TrackCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  id: Int!
  isEnabled: Int!
  name: Int!
  updatedAt: Int!
}

type TrackMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
}

type TrackMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  isEnabled: Boolean
  name: String
  updatedAt: DateTime
}

type User {
  _count: UserCount!
  avatar: UserAvatarPicture
  bornAt: DateTime
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  email: String!
  firstName: String!
  gender: UserGender!
  id: ID!
  isBanned: Boolean!
  isDeleted: Boolean!
  isEmailVerified: Boolean!
  isPhoneVerified: Boolean!
  isTermsAccepted: Boolean!
  lastLoginAt: DateTime!
  lastName: String!
  linkedinUrl: String
  locale: UserLocale!
  phoneIndex: String
  phoneNumber: String
  roles: [UserRole!]
  updatedAt: DateTime
}

type UserAlreadyExistsError implements Error {
  code: String!
  message: String
}

type UserAvatarPicture {
  createdAt: DateTime!
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: ID!
  provider: MediaProvider!
  size: Int
  status: MediaStatus!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UserAvatarPictureAvgAggregate {
  height: Float
  size: Float
  width: Float
}

type UserAvatarPictureCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  fileToDeleteAt: Int!
  height: Int!
  id: Int!
  provider: Int!
  size: Int!
  status: Int!
  updatedAt: Int!
  width: Int!
}

type UserAvatarPictureMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  updatedAt: DateTime
  width: Int
}

type UserAvatarPictureMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  fileToDeleteAt: DateTime
  height: Int
  id: String
  provider: MediaProvider
  size: Int
  status: MediaStatus
  updatedAt: DateTime
  width: Int
}

type UserAvatarPictureSumAggregate {
  height: Int
  size: Int
  width: Int
}

type UserBannedError implements Error {
  code: String!
  message: String
}

type UserCount {
  avatarPictures: Int!
}

type UserCountAggregate {
  _all: Int!
  bornAt: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  email: Int!
  firstName: Int!
  gender: Int!
  id: Int!
  isEmailVerified: Int!
  isPhoneVerified: Int!
  lastLoginAt: Int!
  lastName: Int!
  linkedinUrl: Int!
  locale: Int!
  phoneIndex: Int!
  phoneNumber: Int!
  roles: Int!
  updatedAt: Int!
}

input UserCreateOneInput {
  _avatarPictureID: String
  bornAt: DateTime
  description: String
  email: String!
  firstName: String!
  gender: UserGender!
  id: String
  lastName: String!
  linkedinUrl: String
  locale: UserLocale!
  password: String!
  phoneIndex: String
  phoneNumber: String
}

union UserCreatePayload = UserAlreadyExistsError | UserSuccess

union UserDeletePayload = DeletionSuccess | NotAuthorizedError | UserNotFoundError

type UserDeletedError implements Error {
  code: String!
  message: String
}

enum UserGender {
  FEMALE
  MALE
  OTHER
  UNDEFINED
}

enum UserLocale {
  EN
  FR
}

type UserMaxAggregate {
  bornAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  gender: UserGender
  id: String
  isEmailVerified: Boolean
  isPhoneVerified: Boolean
  lastLoginAt: DateTime
  lastName: String
  linkedinUrl: String
  locale: UserLocale
  phoneIndex: String
  phoneNumber: String
  updatedAt: DateTime
}

type UserMinAggregate {
  bornAt: DateTime
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  gender: UserGender
  id: String
  isEmailVerified: Boolean
  isPhoneVerified: Boolean
  lastLoginAt: DateTime
  lastName: String
  linkedinUrl: String
  locale: UserLocale
  phoneIndex: String
  phoneNumber: String
  updatedAt: DateTime
}

type UserNotFoundError implements Error {
  code: String!
  message: String
}

input UserOrderByWithRelationInput {
  bornAt: SortOrder
  description: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  linkedinUrl: SortOrder
  locale: SortOrder
  password: SortOrder
  phoneIndex: SortOrder
  phoneNumber: SortOrder
}

union UserPayload = UserNotFoundError | UserSuccess

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

type UserSuccess {
  user: User!
}

input UserUpdateOneInput {
  _avatarPictureID: String
  bornAt: DateTime
  description: String
  email: String
  firstName: String
  gender: UserGender
  id: String
  lastName: String
  linkedinUrl: String
  locale: UserLocale
  password: String
  phoneIndex: String
  phoneNumber: String
}

union UserUpdatePayload = NotAuthorizedError | UserNotFoundError | UserSuccess

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  bornAt: DateTimeNullableFilter
  description: StringNullableFilter
  email: StringFilter
  firstName: StringFilter
  gender: EnumUserGenderFilter
  id: StringFilter
  lastName: StringFilter
  linkedinUrl: StringNullableFilter
  locale: EnumUserLocaleFilter
  password: StringFilter
  phoneIndex: StringNullableFilter
  phoneNumber: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

union UsersPayload = UsersSuccess

type UsersSuccess {
  users: [User!]!
}

type WrongAuthTokenFormatError implements Error {
  code: String!
  message: String
}

type WrongCredentialsError implements Error {
  code: String!
  message: String
}