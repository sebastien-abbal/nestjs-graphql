// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@types/graphql"
  tsConfigFilePath       = "../tsconfig.json"
  reExport               = All
  noAtomicOperations     = true
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserGender {
  MALE
  FEMALE
  OTHER
  UNDEFINED
}

enum UserLocale {
  EN
  FR
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
}

enum MediaProvider {
  AWS
}

enum MediaStatus {
  UPLOADING
  CONVERTING
  ONLINE
  OFFLINE
  ERROR
}

model User {
  /// @HideField({ match: ['UserCreateOneInput', 'UserUpdateOneInput'] })
  id              String              @id @default(uuid())
  /// @Validator.MaxLength(50)
  /// @Validator.IsOptional()
  firstName       String
  /// @Validator.MaxLength(50)
  /// @Validator.IsOptional()
  lastName        String
  /// @HideField({ output: true })
  password        String
  gender          UserGender
  locale          UserLocale
  /// @HideField({ input: true })
  roles           UserRole[]
  /// @Validator.IsEmail()
  /// @Validator.IsOptional()
  email           String              @unique()
  /// @HideField({ input: true })
  isEmailVerified Boolean             @default(false)
  /// @Validator.IsOptional()
  phoneNumber     String?
  /// @Validator.IsOptional()
  phoneIndex      String?
  /// @HideField({ input: true })
  isPhoneVerified Boolean             @default(false)
  /// @Validator.IsUrl()
  /// @Validator.IsOptional()
  linkedinUrl     String?
  /// @Validator.IsOptional()
  /// @Validator.MaxLength(2500)
  description     String?
  /// @HideField({ input: true, output: true })
  termsAcceptedAt DateTime            @default(now())
  /// @Validator.IsOptional()
  /// @Validator.IsDate()
  bornAt          DateTime?
  /// @HideField({ input: true, output: true })
  bannedAt        DateTime?
  /// @HideField({ input: true })
  lastLoginAt     DateTime            @default(now())
  /// @HideField({ input: true })
  createdAt       DateTime            @default(now())
  /// @HideField({ input: true })
  updatedAt       DateTime?           @updatedAt
  /// @HideField({ input: true })
  deletedAt       DateTime?
  /// @HideField({ input: true, output: true })
  avatarPictures  UserAvatarPicture[] @relation("UserAvatarPictures_OneToMany")
}

model UserAvatarPicture {
  /// @HideField({ match: ['UserAvatarPictureCreateInput', 'UserAvatarPictureUpdateInput'] })
  id             String        @id @default(uuid())
  /// @HideField({ input: true })
  provider       MediaProvider @default(AWS)
  /// @HideField({ input: true })
  status         MediaStatus   @default(UPLOADING)
  /// @HideField({ input: true })
  size           Int?
  /// @HideField({ input: true })
  width          Int?
  /// @HideField({ input: true })
  height         Int?
  /// @HideField({ input: true })
  createdAt      DateTime      @default(now())
  /// @HideField({ input: true })
  updatedAt      DateTime?     @updatedAt
  /// @HideField({ input: true })
  deletedAt      DateTime?
  /// @HideField({ input: true })
  fileToDeleteAt DateTime?
  /// @HideField({ input: true, output: true })
  user           User          @relation("UserAvatarPictures_OneToMany", fields: [userID], references: [id])
  /// @HideField({ input: true, output: true })
  userID         String
}
